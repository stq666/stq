<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <!--
       shiro与spring整合的配置如下：
       shiro的组件都是javabean/POJO式的组件，所以非常容易利用spring进行组件的管理，可以非常方便的从init配置移到spring进行管理。
       shiro配置如下几个步骤：
       第一步：配置securityManager:这是shiro的核心，就像springmvc的DispatcherServlet一样。
       第二步：配置realm:realm是shiro的桥梁，它主要用于判断subject是否可以登录及权限等。
       第三步：配置shiro的过滤器:bean的id必须与web.xml中的filter-name的值相同。
       第四步：配置用户授权/认证信息的cache.
       第五步：配置shiro的生命周期处理器：LifecycleBeanPostProcessor.
       第六步：配置aop式的方法级权限检查。

    -->
    <!--第一步：配置securityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="serviceRealm"/>
        <property name="sessionManager" ref="sessionManager" />
    </bean>
    <!--第二步：配置realm-->
    <bean id="serviceRealm" class="com.stq.realm.service.ServiceRealm">
        <property name="useSalt" value="true" />
        <!--<property name="authenticationService" ref="authenticationService" />-->
        <!--<property name="cacheManager" ref="cacheManager" />-->
        <!--<property name="permissionResolver" ref="permissionResolver" />-->
        <property name="credentialsMatcher" ref="sha512Matcher" />
    </bean>
    <!--第三步：配置shiro的过滤器-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/index.html" />
        <property name="successUrl" value="/main.html" />
        <property name="unauthorizedUrl" value="/index.html" />
        <property name="filterChainDefinitions">
            <value>
                <!--/rest/security/login = anon-->


            </value>
        </property>
    </bean>

    <!-- 第四步：配置用户授权/认证信息的cache TODO-->
    <!-- 第五步：配置shiro的生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!-- 第六步：配置aop式的方法级权限检查-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />


    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdCookieEnabled" value="true" />
        <property name="sessionDAO" ref="sessionDAO" />
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
    <!--会话的DAO-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO" />
    <!--会话cookie模板-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <bean  class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!--凭证匹配器-->
    <bean id="sha512Matcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="SHA-256" />
        <property name="hashIterations" value="1024" />
    </bean>











    <!--<bean id="permissionResolver" class="com.hr.cornerstone.security.SimplePermissionResolver" />-->
    <!--<bean id="passwordService" class="com.hr.cornerstone.security.PasswordService">-->
        <!--<property name="hashedCredentialsMatcher" ref="sha512Matcher" />-->
    <!--</bean>-->
    <!--&lt;!&ndash;<bean id="cacheManager" class="com.innovation.cornerstone.security.SimpleCacheManager" />&ndash;&gt;-->
    <!--<bean id="authenticationService" class="com.hr.security.SimpleAuthenticationService" />-->
    <!--<bean id="restPerms" class="com.hr.cornerstone.security.RestPermissionsAuthorizationFilter" />-->
    <!--<bean id="forceLogout" class="com.hr.cornerstone.security.ForceLogoutFilter" />-->
</beans>